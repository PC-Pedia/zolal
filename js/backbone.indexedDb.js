/* Backbone IndexedDb 0.0.13 @ 79ff47c */
(function(root,factory){if(typeof define==="function"&&define.amd){define(["backbone","underscore"],factory)}else if(typeof exports==="object"){module.exports=factory(require("backbone"),require("underscore"))}else{root.returnExports=factory(root.Backbone,root._)}})(this,function(Backbone,_){function S4(){return((1+Math.random())*65536|0).toString(16).substring(1)}function guid(){return S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4()}var indexedDB=window.indexedDB||window.webkitIndexedDB||window.mozIndexedDB||window.msIndexedDB;var IDBTransaction=window.IDBTransaction||window.webkitIDBTransaction||{READ_WRITE:"readwrite"};var IDBKeyRange=window.IDBKeyRange||window.webkitIDBKeyRange;window.IDBCursor=window.IDBCursor||window.webkitIDBCursor||window.mozIDBCursor||window.msIDBCursor;if(_(indexedDB).isUndefined()){return}function Driver(schema,ready,nolog){this.schema=schema;this.ready=ready;this.error=null;this.transactions=[];this.db=null;this.nolog=nolog;this.supportOnUpgradeNeeded=false;var lastMigrationPathVersion=_.last(this.schema.migrations).version;if(!this.nolog)debugLog("opening database "+this.schema.id+" in version #"+lastMigrationPathVersion);this.dbRequest=indexedDB.open(this.schema.id,lastMigrationPathVersion);this.launchMigrationPath=function(dbVersion){var transaction=this.dbRequest.transaction||versionRequest.result;var clonedMigrations=_.clone(schema.migrations);this.migrate(transaction,clonedMigrations,dbVersion,{success:function(){this.ready()}.bind(this),error:function(){this.error="Database not up to date. "+dbVersion+" expected was "+lastMigrationPathVersion}.bind(this)})};this.dbRequest.onblocked=function(event){if(!this.nolog)debugLog("blocked")};this.dbRequest.onsuccess=function(e){this.db=e.target.result;if(!this.supportOnUpgradeNeeded){var currentIntDBVersion=parseInt(this.db.version)||0;var lastMigrationInt=parseInt(lastMigrationPathVersion)||0;if(currentIntDBVersion===lastMigrationInt){this.ready()}else if(currentIntDBVersion<lastMigrationInt){this.launchMigrationPath(currentIntDBVersion)}else{this.error="Database version is greater than current code "+currentIntDBVersion+" expected was "+lastMigrationInt}}}.bind(this);this.dbRequest.onerror=function(e){this.error="Couldn't not connect to the database"}.bind(this);this.dbRequest.onabort=function(e){this.error="Connection to the database aborted"}.bind(this);this.dbRequest.onupgradeneeded=function(iDBVersionChangeEvent){this.db=iDBVersionChangeEvent.target.transaction.db;this.supportOnUpgradeNeeded=true;if(!this.nolog)debugLog("onupgradeneeded = "+iDBVersionChangeEvent.oldVersion+" => "+iDBVersionChangeEvent.newVersion);this.launchMigrationPath(iDBVersionChangeEvent.oldVersion)}.bind(this)}function debugLog(str){if(typeof window!=="undefined"&&typeof window.console!=="undefined"&&typeof window.console.log!=="undefined"){window.console.log(str)}else if(console.log!=="undefined"){console.log(str)}}Driver.prototype={_track_transaction:function(transaction){this.transactions.push(transaction);function removeIt(){var idx=this.transactions.indexOf(transaction);if(idx!==-1){this.transactions.splice(idx)}}transaction.oncomplete=removeIt.bind(this);transaction.onabort=removeIt.bind(this);transaction.onerror=removeIt.bind(this)},migrate:function(transaction,migrations,version,options){if(!this.nolog)debugLog("migrate begin version from #"+version);var that=this;var migration=migrations.shift();if(migration){if(!version||version<migration.version){if(typeof migration.before=="undefined"){migration.before=function(next){next()}}if(typeof migration.after=="undefined"){migration.after=function(next){next()}}if(!this.nolog)debugLog("migrate begin before version #"+migration.version);migration.before(function(){if(!this.nolog)debugLog("migrate done before version #"+migration.version);var continueMigration=function(e){if(!this.nolog)debugLog("migrate begin migrate version #"+migration.version);migration.migrate(transaction,function(){if(!this.nolog)debugLog("migrate done migrate version #"+migration.version);if(!this.nolog)debugLog("migrate begin after version #"+migration.version);migration.after(function(){if(!this.nolog)debugLog("migrate done after version #"+migration.version);if(!this.nolog)debugLog("Migrated to "+migration.version);if(migrations.length==0){if(!this.nolog)debugLog("migrate setting transaction.oncomplete to finish  version #"+migration.version);transaction.oncomplete=function(){if(!that.nolog)debugLog("migrate done transaction.oncomplete version #"+migration.version);if(!that.nolog)debugLog("Done migrating");options.success()}}else{if(!this.nolog)debugLog("migrate end from version #"+version+" to "+migration.version);that.migrate(transaction,migrations,version,options)}}.bind(this))}.bind(this))}.bind(this);if(!this.supportOnUpgradeNeeded){if(!this.nolog)debugLog("migrate begin setVersion version #"+migration.version);var versionRequest=this.db.setVersion(migration.version);versionRequest.onsuccess=continueMigration;versionRequest.onerror=options.error}else{continueMigration()}}.bind(this))}else{if(!this.nolog)debugLog("Skipping migration "+migration.version);this.migrate(transaction,migrations,version,options)}}},execute:function(storeName,method,object,options){if(!this.nolog)debugLog("execute : "+method+" on "+storeName+" for "+object.id);switch(method){case"create":this.create(storeName,object,options);break;case"read":if(object.id||object.cid){this.read(storeName,object,options)}else{this.query(storeName,object,options)}break;case"update":this.update(storeName,object,options);break;case"delete":if(object.id||object.cid){this.delete(storeName,object,options)}else{this.clear(storeName,object,options)}break;default:}},create:function(storeName,object,options){var writeTransaction=this.db.transaction([storeName],"readwrite");var store=writeTransaction.objectStore(storeName);var json=object.toJSON();var writeRequest;if(json.id===undefined&&!store.autoIncrement)json.id=guid();writeTransaction.onerror=function(e){options.error(e)};writeTransaction.oncomplete=function(e){options.success(json)};if(!store.keyPath)writeRequest=store.add(json,json.id);else writeRequest=store.add(json)},update:function(storeName,object,options){var writeTransaction=this.db.transaction([storeName],"readwrite");var store=writeTransaction.objectStore(storeName);var json=object.toJSON();var writeRequest;if(!json.id)json.id=guid();if(!store.keyPath)writeRequest=store.put(json,json.id);else writeRequest=store.put(json);writeRequest.onerror=function(e){options.error(e)};writeTransaction.oncomplete=function(e){options.success(json)}},read:function(storeName,object,options){var readTransaction=this.db.transaction([storeName],"readonly");this._track_transaction(readTransaction);var store=readTransaction.objectStore(storeName);var json=object.toJSON();var getRequest=null;if(json.id){getRequest=store.get(json.id)}else if(options.index){var index=store.index(options.index.name);getRequest=index.get(options.index.value)}else{var cardinality=0;_.each(store.indexNames,function(key,index){index=store.index(key);if(typeof index.keyPath==="string"&&1>cardinality){if(json[index.keyPath]!==undefined){getRequest=index.get(json[index.keyPath]);cardinality=1}}else if(typeof index.keyPath==="object"&&index.keyPath.length>cardinality){var valid=true;var keyValue=_.map(index.keyPath,function(keyPart){valid=valid&&json[keyPart]!==undefined;return json[keyPart]});if(valid){getRequest=index.get(keyValue);cardinality=index.keyPath.length}}})}if(getRequest){getRequest.onsuccess=function(event){if(event.target.result){options.success(event.target.result)}else{options.error("Not Found")}};getRequest.onerror=function(){options.error("Not Found")}}else{options.error("Not Found")}},"delete":function(storeName,object,options){var deleteTransaction=this.db.transaction([storeName],"readwrite");var store=deleteTransaction.objectStore(storeName);var json=object.toJSON();var deleteRequest=store.delete(json.id);deleteTransaction.oncomplete=function(event){options.success(null)};deleteRequest.onerror=function(event){options.error("Not Deleted")}},clear:function(storeName,object,options){var deleteTransaction=this.db.transaction([storeName],"readwrite");var store=deleteTransaction.objectStore(storeName);var deleteRequest=store.clear();deleteRequest.onsuccess=function(event){options.success(null)};deleteRequest.onerror=function(event){options.error("Not Cleared")}},query:function(storeName,collection,options){var elements=[];var skipped=0,processed=0;var queryTransaction=this.db.transaction([storeName],"readonly");var readCursor=null;var store=queryTransaction.objectStore(storeName);var index=null,lower=null,upper=null,bounds=null;if(options.conditions){_.each(store.indexNames,function(key){if(!readCursor){index=store.index(key);if(options.conditions[index.keyPath]instanceof Array){lower=options.conditions[index.keyPath][0]>options.conditions[index.keyPath][1]?options.conditions[index.keyPath][1]:options.conditions[index.keyPath][0];upper=options.conditions[index.keyPath][0]>options.conditions[index.keyPath][1]?options.conditions[index.keyPath][0]:options.conditions[index.keyPath][1];bounds=IDBKeyRange.bound(lower,upper,true,true);if(options.conditions[index.keyPath][0]>options.conditions[index.keyPath][1]){readCursor=index.openCursor(bounds,window.IDBCursor.PREV||"prev")}else{readCursor=index.openCursor(bounds,window.IDBCursor.NEXT||"next")}}else if(typeof options.conditions[index.keyPath]==="object"&&("$gt"in options.conditions[index.keyPath]||"$gte"in options.conditions[index.keyPath])){if("$gt"in options.conditions[index.keyPath])bounds=IDBKeyRange.lowerBound(options.conditions[index.keyPath]["$gt"],true);else bounds=IDBKeyRange.lowerBound(options.conditions[index.keyPath]["$gte"]);readCursor=index.openCursor(bounds,window.IDBCursor.NEXT||"next")}else if(typeof options.conditions[index.keyPath]==="object"&&("$lt"in options.conditions[index.keyPath]||"$lte"in options.conditions[index.keyPath])){if("$lt"in options.conditions[index.keyPath])bounds=IDBKeyRange.upperBound(options.conditions[index.keyPath]["$lt"],true);else bounds=IDBKeyRange.upperBound(options.conditions[index.keyPath]["$lte"]);readCursor=index.openCursor(bounds,window.IDBCursor.NEXT||"next")}else if(options.conditions[index.keyPath]!=undefined){bounds=IDBKeyRange.only(options.conditions[index.keyPath]);readCursor=index.openCursor(bounds)}}})}else{if(options.range){lower=options.range[0]>options.range[1]?options.range[1]:options.range[0];upper=options.range[0]>options.range[1]?options.range[0]:options.range[1];bounds=IDBKeyRange.bound(lower,upper);if(options.range[0]>options.range[1]){readCursor=store.openCursor(bounds,window.IDBCursor.PREV||"prev")}else{readCursor=store.openCursor(bounds,window.IDBCursor.NEXT||"next")}}else{readCursor=store.openCursor()}}if(typeof readCursor=="undefined"||!readCursor){options.error("No Cursor")}else{readCursor.onerror=function(e){options.error("readCursor error",e)};readCursor.onsuccess=function(e){var cursor=e.target.result;if(!cursor){if(options.addIndividually||options.clear){collection.trigger("reset")}else{options.success(elements)}}else{if(options.limit&&processed>=options.limit){if(bounds&&options.conditions[index.keyPath]){cursor.continue(options.conditions[index.keyPath][1]+1)}else{cursor.continue()}}else if(options.offset&&options.offset>skipped){skipped++;cursor.continue()}else{if(options.addIndividually){collection.add(cursor.value)}else if(options.clear){var deleteRequest=store.delete(cursor.value.id);deleteRequest.onsuccess=function(event){elements.push(cursor.value)};deleteRequest.onerror=function(event){elements.push(cursor.value)}}else{elements.push(cursor.value)}processed++;cursor.continue()}}}}},close:function(){if(this.db){this.db.close()}}};function ExecutionQueue(schema,next,nolog){this.driver=new Driver(schema,this.ready.bind(this),nolog);this.started=false;this.stack=[];this.version=_.last(schema.migrations).version;this.next=next}ExecutionQueue.prototype={ready:function(){this.started=true;_.each(this.stack,function(message){this.execute(message)}.bind(this));this.stack=[];this.next()},execute:function(message){if(this.started){this.driver.execute(message[2].storeName||message[1].storeName,message[0],message[1],message[2])}else{this.stack.push(message)}},close:function(){this.driver.close()}};var Databases={};function sync(method,object,options){if(method=="closeall"){_.each(Databases,function(database){database.close()});Databases={};return}if(typeof object.database==="undefined"&&typeof Backbone.ajaxSync==="function"){return Backbone.ajaxSync(method,object,options)}var schema=object.database;if(Databases[schema.id]){if(Databases[schema.id].version!=_.last(schema.migrations).version){Databases[schema.id].close();delete Databases[schema.id]}}var promise;if(typeof Backbone.$==="undefined"||typeof Backbone.$.Deferred==="undefined"){var noop=function(){};var resolve=noop;var reject=noop}else{var dfd=Backbone.$.Deferred();var resolve=dfd.resolve;var reject=dfd.reject;promise=dfd.promise()}var success=options.success;options.success=function(resp){if(success)success(resp);resolve();object.trigger("sync",object,resp,options)};var error=options.error;options.error=function(resp){if(error)error(resp);reject();object.trigger("error",object,resp,options)};var next=function(){Databases[schema.id].execute([method,object,options])};if(!Databases[schema.id]){Databases[schema.id]=new ExecutionQueue(schema,next,schema.nolog)}else{next()}return promise}Backbone.ajaxSync=Backbone.sync;Backbone.sync=sync;return{sync:sync,debugLog:debugLog}});